AWSTemplateFormatVersion: 2010-09-09
Description: credentials-flow
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Default: test
    AllowedValues:
    - test
    - prod
    Description: The environment to deploy to.
  KeyRotationFrequency:
    Type: Number
    Default: 1
    Description: The frequency to rotate the keys in days
  TokenUrl:
    Type: String
    Description: The URL to request a token from

Resources:
  GetTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/get-token
      Handler: main.handler
      Runtime: nodejs18.x
      FunctionName: !Sub GetTokenFunction-${Environment}
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Role: !GetAtt GetTokenFunctionCustomRole.Arn
      Description: The lambda function to test JWT generation and token request.
      Environment:
        Variables:
          JWT_KEYS_DATA_TABLE: !Ref JwtKeysDataTable
          TOKEN_URL: !Ref TokenUrl

  GetTokenFunctionCustomRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SignPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:Query'
                Resource: !GetAtt JwtKeysDataTable.Arn
              - Effect: Allow
                Action:
                  - 'kms:Sign'
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'


  # This is a Lambda function config associated with the source code: generate-key.ts
  GenerateKeyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/generate-key
      Handler: main.handler
      FunctionName: !Sub GenerateKeyFunction-${Environment}
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Role: !GetAtt GenerateKeyFunctionCustomRole.Arn
      Description: A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          JWT_KEYS_DATA_TABLE: !Ref JwtKeysDataTable
          KEY_ROTATION_FREQUENCY: !Ref KeyRotationFrequency
      Events:
        CWSchedule:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: !Sub rate(${KeyRotationFrequency} day)
            Name: ScheduleKeyRotation
            Description: Schedule key rotation

  GenerateKeyFunctionCustomRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CreateKeyPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                Resource: !GetAtt JwtKeysDataTable.Arn
              - Effect: Allow
                Action:
                  - 'kms:CreateKey'
                  - 'kms:CreateAlias'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'kms:PutKeyPolicy'
                Resource: '*'
                Condition:
                  StringEquals:
                    kms:ViaService: "lambda.amazonaws.com"
                    kms:CallerAccount: !Sub "${AWS::AccountId}"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'

  # This is a Lambda function config associated with the source code: get-jwks.ts
  GetJWKSFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/get-jwks
      Handler: main.handler
      Runtime: nodejs18.x
      FunctionName: !Sub GetJWKSFunction-${Environment}
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Role: !GetAtt GetJWKSFunctionCustomRole.Arn
      Description: The lambda function the API Gateway will use to get the JWKS
        for the client to validate the JWT
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          JWT_KEYS_DATA_TABLE: !Ref JwtKeysDataTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /.well-known/jwks.json
            Method: GET
          

  GetJWKSFunctionCustomRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ReadKeyPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'kms:DescribeKey'
                  - 'kms:GetPublicKey'
                Resource: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*'
              - Effect: Allow
                Action:
                  - 'dynamodb:Query'
                Resource: !GetAtt JwtKeysDataTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'

  JwtKeysDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub JwtKeysDataTable-${Environment}
      AttributeDefinitions:
        - AttributeName: prefix
          AttributeType: S
        - AttributeName: version
          AttributeType: N
      KeySchema:
        - AttributeName: prefix
          KeyType: HASH
        - AttributeName: version
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'

Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for environment
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"

Globals:
  Function:
    Tracing: Active
  Api:
    TracingEnabled: true
